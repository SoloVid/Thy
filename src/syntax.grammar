@top Script { statement (newline statement)* }

@skip { space | LineComment }

statement {
  TypeStatement |
  Definition |
  VariableAssignment |
  FunctionCallStatement
}

Definition {
  (kw<"export"> | kw<"private">)?
  (
    ConstantAssignment |
    VariableDeclaration
  )
}

FunctionCallStatement {
  kw<"yield">? FunctionCall
}

FunctionCall {
  ScopedValueIdentifier TypeArguments Arguments
}

ConstantAssignment {
  ValueIdentifier kw<"is"> FunctionCall
}

VariableAssignment {
  ScopedValueIdentifier kw<"to"> FunctionCall
}

VariableDeclaration {
  ValueIdentifier kw<"be"> ParameterizedType
}

Arguments {
  atomicExpression* (Block (kw<"and"> Arguments)?)?
}

atomicExpression {
  Number |
  String |
  ScopedValueIdentifier
}

Block {
  indent Script outdent
}

ScopedTypeIdentifier {
  (ValueIdentifier ".")* TypeIdentifier
}

ScopedValueIdentifier {
  (ValueIdentifier ".")* ValueIdentifier
}

ParameterizedType {
  ScopedTypeIdentifier TypeArguments
}

TypeParameters {
  TypeIdentifier*
}

TypeArguments {
  ScopedTypeIdentifier* (Block (kw<"and"> TypeArguments)?)?
}

TypeStatement {
  TypeAliasDefinition |
  TypeGenericDefinition |
  TypeFunctionDefinition
}

TypeGiven {
  // Base type, injected type name, default type
  kw<"type"> kw<"given"> ScopedTypeIdentifier ScopedTypeIdentifier ScopedTypeIdentifier?
}

TypeReturn {
  kw<"type"> kw<"return"> ScopedTypeIdentifier
}

TypeAliasDefinition {
  (kw<"export"> | kw<"private">)? kw<"type"> TypeIdentifier kw<"is"> (ParameterizedType | FunctionCall)
}

TypeFunctionDefinition {
  (kw<"export"> | kw<"private">)? kw<"type"> kw<"fun"> TypeIdentifier Block
}

// Keywords

kw<term> { @specialize[@name={term}]<ValueIdentifier, term> }

@tokens {
  newline { $[\n\r] }
  space { $[ \t\n\r]+ }

  TypeIdentifier { $[A-Z]$[a-zA-Z]+ }
  ValueIdentifier { $[a-z]$[a-zA-Z]+ }

  String { "." (![.] | ".." | ("." $[a-zA-Z]))* "." }

  RestOfLine { ![\n]* }

  "(" ")"
}

@detectDelim
