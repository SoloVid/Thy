@top Script { statement (newline statement)* }

@skip { space | LineComment }

statement {
  FunctionDefinition |
  FunctionCallStatement |
  Assignment |
  Declaration |
  TypeStatement
}

FunctionDefinition {
  kw<"export">? kw<"async">? kw<"fun"> TypeParameters? ValueIdentifier ParameterizedType? Block
}

FunctionCallStatement {
  kw<"yield">? FunctionCall
}

FunctionCall {
  ScopedValueIdentifier TypeArguments? Arguments
}

Assignment {
  kw<"export">? ScopedValueIdentifier kw<"is"> FunctionCall
}

Declaration {
  kw<"export">? ValueIdentifier kw<"be"> ParameterizedType
}

Arguments {
  atomicExpression* (Block (kw<"and"> Arguments)?)?
}

atomicExpression {
  Number |
  String |
  ScopedValueIdentifier
}

Block {
  indent Script outdent
}

ScopedTypeIdentifier {
  (ValueIdentifier ".")* TypeIdentifier
}

ScopedValueIdentifier {
  (ValueIdentifier ".")* ValueIdentifier
}

ParameterizedType {
  // First identifier is the base type. Additional identifiers are type arguments.
  ScopedTypeIdentifier ScopedTypeIdentifier*
}

TypeParameters {
  TypeIdentifier*
}

TypeArguments {
  ScopedTypeIdentifier*
}

TypeStatement {
  TypeAliasDefinition |
  TypeGenericDefinition |
  TypeFunctionDefinition
}

TypeAliasDefinition {
  kw<"export">? kw<"type"> TypeIdentifier kw<"is"> ParameterizedType
}

TypeGenericDefinition {
  // Provides local `extends Blah` capability for generic parameters.
  kw<"type"> TypeIdentifier kw<"be"> ParameterizedType
}

TypeFunctionDefinition {
  kw<"export">? kw<"type"> kw<"fun"> TypeIdentifier Block
}

// Keywords

kw<term> { @specialize[@name={term}]<ValueIdentifier, term> }

@tokens {
  newline { $[\n\r] }
  space { $[ \t\n\r]+ }

  TypeIdentifier { $[A-Z]$[a-zA-Z]+ }
  ValueIdentifier { $[a-z]$[a-zA-Z]+ }

  String { "." (![.] | "..")* "." }

  RestOfLine { ![\n]* }

  "(" ")"
}

@detectDelim
